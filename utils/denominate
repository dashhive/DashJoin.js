#!/usr/bin/env node
//# vi: ft=js

let DENOM_AMOUNT = 1.00001;
const usage = [
	'Usage: denominate [--custom-source=N] [--dry-run]',
	'',
	'flags: ',
	'   --users=foo,bar     specify your own comma-delimited users.',
	`   --amount=N          specify an amount (in DASH). Defaults to ${DENOM_AMOUNT}.`,
	'   --dump-users        if specified, will dump the users variable then exit.',
	'                       If used with --users=foo,bar, will dump the users after ',
	'                       FILE has been imported by --users',
	'   --only-source       when combined with --custom-source=FOO, will only transfer ',
	'                       funds from the wallet named FOO and will use all other wallets ',
	'                       as destination wallets. Handy if you have one wallet with tons of ',
	'                       coins and a bunch of other wallets with hardly anything.',
	'   --custom-source=N   use a specific source wallet to pay all other wallets',
	'   --inspect           if set, will show debug info',
	'   --dry-run           if set, wont actually run commands that spend DASH',
	'   --help|-h           this help screen',
	'',
	'example: denominate --custom-source=han',
	'example: denominate',
	'',
	'denominate will loop through test fixture users',
	'and attempt to send denominations to each address it finds in the ',
	'listaddressgroupings sub-cmd of dash-cli. ',
	'',
	'The default mode is to do the above, or you can have one wallet sending to all other wallets ',
	'by using --custom-source=N where N is the user. The user must exist ',
	'in the users array.',
	'',
	'#-----------------------',
	'# Sending custom amounts',
	'#-----------------------',
	"  It's possible to send a custom amount instead of the default of " +
		DENOM_AMOUNT +
		'.',
	'  Simply, use --amount=N, where N is your amount. For example: ',
	'    denominate --amount=0.0500',
	'',
	'#-------------------------------',
	"# Dumping the 'users' array ",
	'#-------------------------------',
	'  The users array can be dumped by passing in --dump-users',
	'  For example: ',
	'    denominate --dump-users --dry-run',
	'    [',
	'        "foobar",',
	'        "psend",',
	'        "luke",',
	'        "han",',
	'        "chewie",',
	'    ]',
	'',
].join('\n');
if (
	process.argv.length < 3 ||
	process.argv.includes('--help') ||
	process.argv.includes('h')
) {
	console.info(usage);
	process.exit(1);
}
const proc = require('child_process');
for (let arg of process.argv) {
	let matches = arg.match(/^\-\-amount=(.*)$/);
	if (matches) {
		DENOM_AMOUNT = matches[1];
		console.info(`[+] Using "${DENOM_AMOUNT}" as amount.`);
		break;
	}
}
function denomination_count() {
	return DENOM_AMOUNT;
}
let source = 'luke';
for (let arg of process.argv) {
	let matches = arg.match(/^\-\-custom\-source=(.*)$/);
	if (matches) {
		source = matches[1];
		console.info(`[+] Using "${source}" as source wallet.`);
		break;
	}
}
let users = [
	{ name: 'foobar' },
	{ name: 'psend' },
	{ name: 'luke' },
	{ name: 'han' },
	{ name: 'chewie' },
];
for (const arg of process.argv) {
	let matches = arg.match(/^\-\-users=(.*)$/);
	if (matches) {
		users = [];
		let usernames = matches[1].split(/[,\s]+/);
		for (let username of usernames) {
			let user = { name: username };
			users.push(user);
		}
		console.info(`[+] Using users: '${matches[1]}'`);
	}
}
if (process.argv.includes('--dump-users')) {
	console.log(users);
	process.exit();
}
function inspectUsers() {
	for (const user of users) {
		console.info('[name]:', user.name);
		for (const g of s.groupings) {
			console.info(g);
		}
	}
}
async function processUser(user, address) {
	for (const s of users) {
		if (s.name === user.name) {
			continue;
		}
		if (process.argv.includes('--dry-run')) {
			console.log(
				'mocking:',
				s.name,
				'sendtoaddress',
				address[0],
				denomination_count(),
			);
			continue;
		}
		let ps = await proc.spawnSync('./bin/dash-cli-wallet', [
			s.name,
			'sendtoaddress',
			address[0],
			denomination_count(),
		]);
		if (typeof ps.stdout.toString !== 'undefined') {
			console.log(ps.stdout.toString().replace(/[\n]+$/, ''));
		}
		if (typeof ps.stderr.toString !== 'undefined') {
			if (ps.stderr.toString().length) {
				console.error(ps.stderr.toString());
			}
		}
	}
}
function selectSourceUser() {
	for (let user of users) {
		if (user.name === source) {
			return user;
		}
	}
}
async function processUsers() {
	let src = selectSourceUser();
	if (process.argv.includes('--only-source')) {
		for (const s of users) {
			if (s.name === source) {
				continue;
			}
			for (const g of s.groupings[0]) {
				if (process.argv.includes('--dry-run')) {
					console.log(
						'mocking:',
						src.name,
						'sendtoaddress',
						g[0],
						denomination_count(),
					);
					continue;
				}
				let ps = await proc.spawnSync('./bin/dash-cli-wallet', [
					src.name,
					'sendtoaddress',
					g[0],
					denomination_count(),
				]);
				if (typeof ps.stdout.toString !== 'undefined') {
					console.log(ps.stdout.toString().replace(/[\n]+$/, ''));
				}
				if (typeof ps.stderr.toString !== 'undefined') {
					if (ps.stderr.toString().length) {
						console.error(ps.stderr.toString());
					}
				}
			}
		}
		process.exit();
		return;
	}
	for (const s of users) {
		for (const g of s.groupings[0]) {
			await processUser(s, g);
		}
	}
}
(async function () {
	for (let s of users) {
		let ps = await proc.spawnSync('./bin/dash-cli-wallet', [
			s.name,
			'listaddressgroupings',
		]);
		s.groupings = JSON.parse(ps.stdout.toString());
	}
	if (process.argv.includes('--inspect')) {
		inspectUsers();
	}
	await processUsers();
	if (process.argv.includes('--inspect')) {
		inspectUsers();
	}
})();
